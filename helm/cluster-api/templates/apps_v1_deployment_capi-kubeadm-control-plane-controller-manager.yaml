apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: control-plane-kubeadm
    app.kubernetes.io/instance: '{{ .Release.Name }}'
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: cluster-api
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    application.giantswarm.io/branch: '{{ .Values.project.branch }}'
    application.giantswarm.io/commit: '{{ .Values.project.commit }}'
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
    helm.sh/chart: cluster-api
  name: capi-kubeadm-control-plane-controller-manager
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: control-plane-kubeadm
      control-plane: controller-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: '{{ .Release.Name }}'
        app.kubernetes.io/managed-by: '{{ .Release.Service }}'
        app.kubernetes.io/name: cluster-api
        app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
        application.giantswarm.io/branch: '{{ .Values.project.branch }}'
        application.giantswarm.io/commit: '{{ .Values.project.commit }}'
        cluster.x-k8s.io/provider: control-plane-kubeadm
        control-plane: controller-manager
        helm.sh/chart: cluster-api
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
            weight: 10
      containers:
      - args:
        - --metrics-bind-addr=0.0.0.0:8080
        - --feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=true
        - --watch-filter={{ .Values.watchFilter }}
        - --v=0
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        image: '{{ .Values.registry.domain }}/{{ .Values.images.controlplane.name
          }}:{{ .Values.images.controlplane.tag | default .Values.images.tag }}'
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        - containerPort: 8443
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 65532
          runAsUser: 65532
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: capi-kubeadm-control-plane-manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      - effect: NoSchedule
        key: node.cluster.x-k8s.io/uninitialized
        operator: Exists
      volumes:
      - name: cert
        secret:
          secretName: capi-kubeadm-control-plane-webhook-service-cert
