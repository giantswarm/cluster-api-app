#!/usr/bin/env bash

# This script will generate kustomize patches for webhooks by first getting the
# MutatingWebhookConfiguration and ValidatingWebhookConfiguration, so it
# generates patches only or those webhooks that are specified in upstream.
#
# This way we don't have to specify webhook patches manually, since those
# change from time to time, as CRDs are added, modified and removed.

set -o errexit
set -o nounset
set -o pipefail

# Directories
ROOT_DIR="./$(dirname "$0")/.."
ROOT_DIR="$(realpath "$ROOT_DIR")"
KUSTOMIZE_DIR="$ROOT_DIR/config/helm"
HELM_DIR="$ROOT_DIR/helm/cluster-api"
KUSTOMIZE_INPUT_DIR="$ROOT_DIR/config/helm/input"

# Download upstream manifests
helm_values="$HELM_DIR/values.yaml"
# Giant Swarm specific, since we don't use GitHub releases in https://github.com/giantswarm/cluster-api
version="$(yq e -e '.images.tag' "$helm_values")" || { echo "Could not find image tag value"; exit 1; }
release_asset_filename="cluster-api-components.yaml"
mkdir -p "$KUSTOMIZE_INPUT_DIR"
# Image does not have a shell or `cat` installed, so extract the file using busybox
empty_context="$(mktemp -d)"
cat >"${empty_context}/Dockerfile.manifest" <<EOF
FROM docker.io/giantswarm/cluster-api-controller:${version} as src
FROM docker.io/library/busybox:1
COPY --from=src /for-cluster-api-app-only/cluster-api-components.yaml /file
EOF
docker build -f "${empty_context}/Dockerfile.manifest" -t manifest "${empty_context}"
rm -r "${empty_context}"
docker run --rm manifest cat /file >"$KUSTOMIZE_INPUT_DIR/$release_asset_filename"
[ "$(grep -c ^ "$KUSTOMIZE_INPUT_DIR/$release_asset_filename")" -gt 20000 ] || { >&2 echo "Downloaded ${release_asset_filename} does not seem right"; exit 1; }

# Update kustomize patches for webhooks. We do this for every CRD

# For every CRD, add webhook label selector
for webhook_kind_prefix in Mutating Validating; do
    output_path_prefix="${KUSTOMIZE_DIR}/webhook-$(echo "${webhook_kind_prefix}" | tr '[:upper:]' '[:lower:]')-"
    output_path_suffix="-watchfilter.yaml"
    rm -f "${output_path_prefix}"*"${output_path_suffix}"

    for webhook_cr_name in $(yq e -N "select(.kind==\"${webhook_kind_prefix}WebhookConfiguration\") | .metadata.name" "$KUSTOMIZE_INPUT_DIR/$release_asset_filename"); do
        output_path="${output_path_prefix}${webhook_cr_name}${output_path_suffix}"
        echo "# Generated by 'generate-kustomize-patches.sh'. Do not edit." > "${output_path}"
        webhook="$(
            webhook_cr_name="$webhook_cr_name" \
            yq e "select((.kind==\"${webhook_kind_prefix}WebhookConfiguration\") and .metadata.name==env(webhook_cr_name))" \
                "$KUSTOMIZE_INPUT_DIR/$release_asset_filename"
        )"

        webhook_api_version="$(echo "$webhook" | yq e ".apiVersion" -)"

        echo "Generating watch-filter patches for ${webhook_kind_prefix}WebhookConfiguration $webhook_cr_name"

        webhook_patch="apiVersion: $webhook_api_version
kind: ${webhook_kind_prefix}WebhookConfiguration
metadata:
  name: $webhook_cr_name
webhooks: null
"

        # Get all CRDs for this provider
        for webhook_name in $(webhook_cr_name="$webhook_cr_name" yq e "select((.kind==\"${webhook_kind_prefix}WebhookConfiguration\") and .metadata.name==env(webhook_cr_name)) | .webhooks[].name" "$KUSTOMIZE_INPUT_DIR/$release_asset_filename"); do
            object_selector_patch="$(
                webhook_name="$webhook_name" \
                yq e --null-input \
                    '.name = env(webhook_name) |
                    .objectSelector.matchLabels["cluster.x-k8s.io/watch-filter"] = "{{ .Values.watchFilter }}"'
                )"

            webhook_patch="$(
                echo "$webhook_patch" | \
                    object_selector_patch="$object_selector_patch" \
                    yq e '.webhooks += [env(object_selector_patch)]' -
            )"
        done

        # Write webhook patch to file
        echo "$webhook_patch" >> "${output_path}"

        output_filename="${output_path##*/}"
        grep -qwF "path: ${output_filename}" "${KUSTOMIZE_DIR}/kustomization.yaml" || { echo "Please add new patch ${output_filename} to ${KUSTOMIZE_DIR}/kustomization.yaml"; exit 1; }
    done
done
