apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  # Cluster API components
  - bases/cluster-api-components.yaml
  - ciliumnetworkpolicy_capi-controller-manager.yaml
  - ciliumnetworkpolicy_capi-kubeadm-bootstrap-controller-manager.yaml
  - ciliumnetworkpolicy_capi-kubeadm-control-plane-controller-manager.yaml
  - networkpolicy_capi-controller-manager.yaml
  - networkpolicy_capi-kubeadm-bootstrap-controller-manager.yaml
  - networkpolicy_capi-kubeadm-control-plane-controller-manager.yaml
  # Watch filter configmap
  - bases/configmaps/watch-filter.yaml

namespace: "{{ .Release.Namespace }}"

# we want to define our own images
images:
  - name: registry.k8s.io/cluster-api/cluster-api-controller
    newName: "{{.Values.images.domain}}/{{.Values.images.core.name}}"
    newTag: "{{.Values.images.core.tag | default .Values.images.tag}}"

  - name: registry.k8s.io/cluster-api/kubeadm-bootstrap-controller
    newName: "{{.Values.images.domain}}/{{.Values.images.bootstrap.name}}"
    newTag: "{{.Values.images.bootstrap.tag | default .Values.images.tag}}"

  - name: registry.k8s.io/cluster-api/kubeadm-control-plane-controller
    newName: "{{.Values.images.domain}}/{{.Values.images.controlplane.name}}"
    newTag: "{{.Values.images.controlplane.tag | default .Values.images.tag}}"

transformers:
  # add all the mandatory labels to make an object managed by helm
  - common-labels.yaml
  # Add prometheus scrape labels - could be removed in the future as we're using `PodMonitors|ServiceMonitors` to define a scrape target
  - monitoring-annotations.yaml
  # Mutating webhooks
  - patches/mutatingwebhooks/zzz-prefix.yaml

replacements:
# CRDs
- source:
    version: v1
    kind: ConfigMap
    name: watch-filter
    namespace: watch-filter
    fieldPath: data
  targets:
  - select:
      group: admissionregistration.k8s.io
      version: v1
      kind: MutatingWebhookConfiguration
    fieldPaths:
    - webhooks.*.objectSelector.matchLabels
    options:
      create: true
  - select:
      group: admissionregistration.k8s.io
      version: v1
      kind: ValidatingWebhookConfiguration
    fieldPaths:
    - webhooks.*.objectSelector.matchLabels
    options:
      create: true

patches:
  # CRDs
  - path: patches/crds/core.yaml
    target:
      group: apiextensions.k8s.io
      version: v1
      kind: CustomResourceDefinition
      labelSelector: cluster.x-k8s.io/provider=cluster-api
  - path: patches/crds/bootstrap.yaml
    target:
      group: apiextensions.k8s.io
      version: v1
      kind: CustomResourceDefinition
      labelSelector: cluster.x-k8s.io/provider=bootstrap-kubeadm
  - path: patches/crds/controlplane.yaml
    target:
      group: apiextensions.k8s.io
      version: v1
      kind: CustomResourceDefinition
      labelSelector: cluster.x-k8s.io/provider=control-plane-kubeadm

  # Namespaces
  - path: patches/namespaces/capi-system.yaml
  - path: patches/namespaces/capi-kubeadm-bootstrap-system.yaml
  - path: patches/namespaces/capi-kubeadm-control-plane-system.yaml

  # We are not using leader election in our current release, since we are
  # only deploying a single webhook pod.
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: capi-leader-election-role
        namespace: capi-system
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: capi-leader-election-rolebinding
        namespace: capi-system
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: capi-kubeadm-bootstrap-leader-election-role
        namespace: capi-kubeadm-bootstrap-system
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: capi-kubeadm-bootstrap-leader-election-rolebinding
        namespace: capi-kubeadm-bootstrap-system
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: capi-kubeadm-control-plane-leader-election-role
        namespace: capi-kubeadm-control-plane-system
  - patch: |-
      $patch: delete
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: capi-kubeadm-control-plane-leader-election-rolebinding
        namespace: capi-kubeadm-control-plane-system

  # Issuers
  - path: patches/issuers/capi-selfsigned-issuer.yaml
  - path: patches/issuers/capi-kubeadm-bootstrap-selfsigned-issuer.yaml
  - path: patches/issuers/capi-kubeadm-control-plane-selfsigned-issuer.yaml

  # Certificates
  - path: patches/certificates/capi-serving-cert.yaml
  - path: patches/certificates/capi-kubeadm-bootstrap-serving-cert.yaml
  - path: patches/certificates/capi-kubeadm-control-plane-serving-cert.yaml

  # Deployments
  - path: patches/deployments/capi-controller-manager.yaml
  - path: patches/deployments/capi-kubeadm-bootstrap-controller-manager.yaml
  - path: patches/deployments/capi-kubeadm-control-plane-controller-manager.yaml

  # Services
  - path: patches/services/capi-webhook-service.yaml
  - path: patches/services/capi-kubeadm-bootstrap-webhook-service.yaml
  - path: patches/services/capi-kubeadm-control-plane-webhook-service.yaml

  # Mutating webhooks
  - path: patches/mutatingwebhooks/capi-mutating-webhook-configuration.yaml
  - path: patches/mutatingwebhooks/capi-kubeadm-bootstrap-mutating-webhook-configuration.yaml
  - path: patches/mutatingwebhooks/capi-kubeadm-control-plane-mutating-webhook-configuration.yaml

  # Validating webhooks
  - path: patches/validatingwebhooks/capi-validating-webhook-configuration.yaml
  - path: patches/validatingwebhooks/capi-kubeadm-bootstrap-validating-webhook-configuration.yaml
  - path: patches/validatingwebhooks/capi-kubeadm-control-plane-validating-webhook-configuration.yaml
